═══════════════════════════════════════════════════════════════════════════════
  HARMONY CONVERSATION INTEGRATION FLOW DIAGRAM
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│  STEP 1: User Input                                                         │
└─────────────────────────────────────────────────────────────────────────────┘

    User enters message: "What is Python?"
           ↓
    ConversationManager.add_message("user", "What is Python?")
           ↓
    Message stored:
    {
      "role": "user",
      "content": "What is Python?",
      "timestamp": "2025-10-28T...",
      "tokens": 5
    }


┌─────────────────────────────────────────────────────────────────────────────┐
│  STEP 2: Build Harmony Prompt                                               │
└─────────────────────────────────────────────────────────────────────────────┘

    messages = conversation.get_messages_for_harmony()
           ↓
    Returns: [
      {"role": "system", "content": "You are helpful."},
      {"role": "user", "content": "What is Python?"}
    ]
           ↓
    harmony_prompt = builder.build_conversation(
        messages=messages,
        system_prompt=system_prompt,
        developer_prompt=developer_prompt
    )
           ↓
    Returns: HarmonyPrompt(token_ids=[...], text="...", metadata={...})


┌─────────────────────────────────────────────────────────────────────────────┐
│  STEP 3: Generate Response                                                  │
└─────────────────────────────────────────────────────────────────────────────┘

    generated_text = mlx_lm.generate(
        model=model,
        tokenizer=tokenizer,
        prompt=harmony_prompt.token_ids
    )
           ↓
    Raw output:
    "<|start|>assistant
     <|channel|>final<|message|>Python is a programming language.
     <|channel|>analysis<|message|>User asking about Python...
     <|channel|>commentary<|message|>Educational question.
     <|end|>assistant"


┌─────────────────────────────────────────────────────────────────────────────┐
│  STEP 4: Parse Harmony Response                                             │
└─────────────────────────────────────────────────────────────────────────────┘

    parsed = harmony_parser.parse_response_text(
        generated_text,
        tokenizer
    )
           ↓
    Returns: ParsedHarmonyResponse(
        final="Python is a programming language.",
        analysis="User asking about Python...",
        commentary="Educational question.",
        channels={...},
        metadata={...}
    )


┌─────────────────────────────────────────────────────────────────────────────┐
│  STEP 5: Store in Conversation                                              │
└─────────────────────────────────────────────────────────────────────────────┘

    conversation.add_harmony_response(parsed)
           ↓
    Message stored:
    {
      "role": "assistant",
      "content": "Python is a programming language.",
      "timestamp": "2025-10-28T...",
      "tokens": 15,
      "channels": {
        "final": "Python is a programming language.",
        "analysis": "User asking about Python...",
        "commentary": "Educational question."
      },
      "metadata": {
        "harmony_metadata": {
          "token_count": 142,
          "parsing_time_ms": 3
        }
      }
    }


┌─────────────────────────────────────────────────────────────────────────────┐
│  STEP 6: Save Conversation                                                  │
└─────────────────────────────────────────────────────────────────────────────┘

    conversation.save("conversation.json")
           ↓
    JSON file created:
    {
      "messages": [
        { "role": "system", ... },
        { "role": "user", "content": "What is Python?", ... },
        { "role": "assistant", "content": "...", "channels": {...}, ... }
      ],
      "max_context_tokens": 4096,
      "created_at": "2025-10-28T...",
      "metadata": {},
      "total_tokens": 42,
      "message_count": 3
    }


┌─────────────────────────────────────────────────────────────────────────────┐
│  STEP 7: Load and Continue (Round-trip)                                     │
└─────────────────────────────────────────────────────────────────────────────┘

    loaded_conversation = ConversationManager.load("conversation.json")
           ↓
    All channels preserved! ✓
           ↓
    User enters: "Is Python good for beginners?"
           ↓
    loaded_conversation.add_message("user", "Is Python good for beginners?")
           ↓
    messages = loaded_conversation.get_messages_for_harmony()
           ↓
    Returns: [
      {"role": "system", "content": "You are helpful."},
      {"role": "user", "content": "What is Python?"},
      {"role": "assistant", "content": "Python is a programming language."},
      {"role": "user", "content": "Is Python good for beginners?"}
    ]
           ↓
    Build prompt with FULL HISTORY → Generate → Parse → Store
           ↓
    Conversation continues seamlessly! ✓


═══════════════════════════════════════════════════════════════════════════════
  KEY INTEGRATION POINTS
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│  ConversationManager → HarmonyPromptBuilder                                 │
└─────────────────────────────────────────────────────────────────────────────┘

    conversation.get_messages_for_harmony()
           ↓
    builder.build_conversation(messages=messages, ...)


┌─────────────────────────────────────────────────────────────────────────────┐
│  HarmonyResponseParser → ConversationManager                                │
└─────────────────────────────────────────────────────────────────────────────┘

    parsed = parser.parse_response_text(...)
           ↓
    conversation.add_harmony_response(parsed)


┌─────────────────────────────────────────────────────────────────────────────┐
│  ConversationManager → Persistence Layer                                    │
└─────────────────────────────────────────────────────────────────────────────┘

    conversation.save("file.json")  # Channels preserved
           ↓
    loaded = ConversationManager.load("file.json")  # Channels restored


═══════════════════════════════════════════════════════════════════════════════
  BACKWARD COMPATIBILITY
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│  Old Messages (No Channels)                                                 │
└─────────────────────────────────────────────────────────────────────────────┘

    conversation.add_message("user", "Hello")  # Old style
           ↓
    Message stored:
    {
      "role": "user",
      "content": "Hello",
      "timestamp": "...",
      "tokens": 3
      // NO channels field (clean!)
    }
           ↓
    conversation.get_messages_for_harmony()
           ↓
    Returns: [{"role": "user", "content": "Hello"}]  # Works perfectly!


┌─────────────────────────────────────────────────────────────────────────────┐
│  Mixed Harmony + Non-Harmony Messages                                       │
└─────────────────────────────────────────────────────────────────────────────┘

    Conversation:
    1. User: "Hello" (no channels)
    2. Assistant: "Hi!" (WITH channels)
    3. User: "How are you?" (no channels)
    4. Assistant: "Good!" (WITH channels)
           ↓
    All work together seamlessly! ✓
           ↓
    get_messages_for_harmony() extracts all correctly ✓
           ↓
    Save/load preserves channel presence/absence ✓


═══════════════════════════════════════════════════════════════════════════════
  COMPLETE SUCCESS! ✅
═══════════════════════════════════════════════════════════════════════════════
